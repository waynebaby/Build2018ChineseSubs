WEBVTT

00:00:00.000 --> 00:00:01.950
>> Hi，大家好。我是Atin Bansal，

00:00:01.950 --> 00:00:06.015
今天我来为大家介绍VSTS Wiki。

00:00:06.015 --> 00:00:08.795
遗憾的是 Sandeep无法参加

00:00:08.795 --> 00:00:10.905
他是 VSTS Wiki 的所有者。

00:00:10.905 --> 00:00:13.400
但您可以与PPT上列出来的推特账号联系

00:00:13.400 --> 00:00:16.685
来提供反馈或者提出问题

00:00:16.685 --> 00:00:18.900
在我做演示之前

00:00:18.900 --> 00:00:22.225
我想谈一谈我们为什么创建VSTS Wiki。

00:00:22.225 --> 00:00:25.915
我们想要让团队们轻松创建

00:00:25.915 --> 00:00:27.840
流程文档、 项目文档 和开发文档,

00:00:27.840 --> 00:00:31.495
通过一种非常简化的方式。

00:00:31.495 --> 00:00:35.575
我们还会介绍其中帮助我们创建VSTS WIKI的三种底层技术

00:00:35.575 --> 00:00:40.870
第一种技术是GIT.

00:00:40.870 --> 00:00:43.300
GIT 是一种全球范围内广泛使用


00:00:43.300 --> 00:00:45.710
服务于数以百万计的源代码控制存储库的技术

00:00:45.710 --> 00:00:49.410
VSTS Wiki也使用它作为后台支撑.

00:00:49.410 --> 00:00:51.225
第二个是Mark Down。

00:00:51.225 --> 00:00:53.815
Mark Down已成为一个跨多个平台

00:00:53.815 --> 00:00:55.975
的文档标准

00:00:55.975 --> 00:00:58.415
这种标准也是我们在 VSTS Wiki 中使用的。

00:00:58.415 --> 00:01:01.010
第三个是Elastic Search,

00:01:01.010 --> 00:01:03.970
Elastic Search,为我们提供了将所有放到VSTS WIKI上所有内容


00:01:03.970 --> 00:01:07.420
索引并且使其可被发现的所有能力.


00:01:07.420 --> 00:01:09.790
好,让我们来看演示。

00:01:09.790 --> 00:01:12.905
这个演示，我将使用两个角色

00:01:12.905 --> 00:01:15.480
一位是约翰，是业务分析师，

00:01:15.480 --> 00:01:18.240
另一位是杰西卡，是开发人员。

00:01:18.240 --> 00:01:22.445
约翰对于他的文档


00:01:22.445 --> 00:01:23.995
想要简约但不失生动的体验

00:01:23.995 --> 00:01:27.020
但是，杰西卡作为一个共同开发人员

00:01:27.020 --> 00:01:29.255
想要一种她熟悉的编写方式

00:01:29.255 --> 00:01:30.680
她不想单独准备一个环境

00:01:30.680 --> 00:01:33.185
来写她的文档


00:01:33.185 --> 00:01:36.895
她想要用她日常常用的工具解决.

00:01:36.895 --> 00:01:38.905
开发人员最常用的工具可能就是IDE

00:01:38.905 --> 00:01:41.740
能够支持她习惯的工作流程


00:01:41.740 --> 00:01:44.030
而且也要满足她

00:01:44.030 --> 00:01:46.645
编写 API文档 和 SDK文档的需要。

00:01:46.645 --> 00:01:48.890
两个人都需要满足的需求是

00:01:48.890 --> 00:01:51.650
随处发现

00:01:51.650 --> 00:01:54.110
他们两个想要他们写下的文档

00:01:54.110 --> 00:01:56.520
能够马上被其他人马上发现


00:01:56.520 --> 00:02:00.620
因此让我们看看如何让 VSTS Wiki帮您执行此操作。

00:02:00.620 --> 00:02:03.745
我们首先在约翰的角色。

00:02:03.745 --> 00:02:07.550
现在我打开我的演示项目


00:02:07.550 --> 00:02:10.670
假设我是约翰,我再这里点击WIKI 这个tab

00:02:10.670 --> 00:02:13.715
他看到两个选项： 创建 Wiki，

00:02:13.715 --> 00:02:15.590
和 发布Wiki代码 。

00:02:15.590 --> 00:02:17.380
我们稍后讲 发布Wiki代码

00:02:17.380 --> 00:02:20.345
现在先让我们来点击 创建 Wiki，


00:02:20.345 --> 00:02:23.350
在这背后法发生了如下行为:


00:02:23.350 --> 00:02:26.510
系统为这个WIKI 开了一个GIT repo 

00:02:26.510 --> 00:02:29.385
但是，John 是完全不知情的


00:02:29.385 --> 00:02:31.020
他看到一个友好的页面

00:02:31.020 --> 00:02:33.180
系统在这个界面中要求他输入页面标题

00:02:33.180 --> 00:02:37.450
好,让我们起个名字,叫做

00:02:37.450 --> 00:02:42.995
"我的第一页"然后保存关闭.


00:02:42.995 --> 00:02:46.175
如我们所见,页面建立成功


00:02:46.175 --> 00:02:48.080
然后它会出现在右边

00:02:48.080 --> 00:02:49.960
看起来像一个文章目录


00:02:49.960 --> 00:02:52.245
这个目录是系统自动为你创建的


00:02:52.245 --> 00:02:54.930
现在让我们创建一个新页。

00:03:00.290 --> 00:03:03.920
好 现在我想快速的讲一下


00:03:03.920 --> 00:03:07.135
这个WIKI能够提供的能力


00:03:07.135 --> 00:03:09.090
显然，您可以开始使用

00:03:09.090 --> 00:03:14.485
普通Markdown的语法
如果我可以拼写正确。

00:03:14.485 --> 00:03:17.860
但正如您所看到的我们实际上有实时预览的窗口

00:03:17.860 --> 00:03:20.110
在此处写入任何内容

00:03:20.110 --> 00:03:23.350
都会在预览窗口里显示出用户实际会看到的内容


00:03:23.350 --> 00:03:27.190
我之所以觉得这种方式非常赞


00:03:27.190 --> 00:03:28.570
是因为不这样的话我可能会做这样的操作

00:03:28.570 --> 00:03:31.180
我必须先写一些内容 希望它真的正确


00:03:31.180 --> 00:03:32.540
然后保存它，

00:03:32.540 --> 00:03:34.790
然后点击,用其他窗口预览


00:03:34.790 --> 00:03:36.790
等真看到了效果，摸摸鼻子,说:

00:03:36.790 --> 00:03:39.455
"这看起来哪里不对,我们重新再来一次." 😅

00:03:39.455 --> 00:03:41.260
但是，在这里，您实际上能够

00:03:41.260 --> 00:03:43.750
立刻更改内容

00:03:43.750 --> 00:03:47.095
因为你能够在右手边直接看到

00:03:47.095 --> 00:03:49.420
好，我们假设我们正在创建

00:03:49.420 --> 00:03:50.840
Wiki 页面，我们想要链接

00:03:50.840 --> 00:03:53.010
到WIKI的其他页面上


00:03:53.010 --> 00:03:55.005
在这边的顶部，我们有

00:03:55.005 --> 00:03:56.790
快捷方式，供你选用。

00:03:56.790 --> 00:04:00.855
因此，我将快速地使用该快捷方式，然后我会说"链接

00:04:00.855 --> 00:04:07.165
到第一页",这样您可以键入，

00:04:07.165 --> 00:04:10.340
一旦你键入的内容进入文本


00:04:10.340 --> 00:04:14.825
VSTS Wiki 会给您提示所有这个Wiki包含的页面

00:04:14.825 --> 00:04:17.420
您可以搜索,查找

00:04:17.420 --> 00:04:21.195
你寻找的页面并将其链接。

00:04:21.195 --> 00:04:23.270
现在，我还可以

00:04:23.270 --> 00:04:26.345
在名称这里获得提示选择连接

00:04:26.345 --> 00:04:29.000
一样可以得到搜索寻找

00:04:29.000 --> 00:04:31.690
我想要连接页的的支持

00:04:31.690 --> 00:04:35.185
或者，我也可以转到我的目录窗，

00:04:35.185 --> 00:04:37.430
从目录里面拖出页面的连接,扔到这里


00:04:37.430 --> 00:04:38.720
这样的操作仍然有效


00:04:38.720 --> 00:04:41.050
其效果,在你的右手边预览窗体可以看到.


00:04:41.050 --> 00:04:43.570
那么，还有什么链接以外的

00:04:43.570 --> 00:04:45.760
其他东西可以拖进去嘛?


00:04:45.760 --> 00:04:47.560
当然，我肯定想要在我的WIKI页面里面

00:04:47.560 --> 00:04:49.705
放一些图片

00:04:49.705 --> 00:04:51.690
但是，我认为到图片放到git库

00:04:51.690 --> 00:04:54.390
里面是很难的。

00:04:54.390 --> 00:04:55.980
我需要抓图，

00:04:55.980 --> 00:04:57.230
我需要将它保存到磁盘，

00:04:57.230 --> 00:04:58.770
我需要像 GIT repo 上载 

00:04:58.770 --> 00:05:01.065
然后从我的Markdown页面引用它.


00:05:01.065 --> 00:05:04.125
在 VSTS Wiki 这种操作简单得多。

00:05:04.125 --> 00:05:05.880
好，假定这是一个你想
00:05:05.880 --> 00:05:07.590
要抓图粘贴到WIKI的页面


00:05:07.590 --> 00:05:10.630
我只是在我的抓图工具抓图

00:05:10.640 --> 00:05:16.775
转到这边Ctrl + V, 搞定

00:05:16.775 --> 00:05:19.020
在这里可以看到我图片的链接


00:05:19.020 --> 00:05:20.220
而且我有实际效果预览

00:05:20.220 --> 00:05:22.590
图像就在页面这里。

00:05:22.590 --> 00:05:24.765
过程就几秒钟,仅此而已

00:05:24.765 --> 00:05:26.985
此外借助于 Gatwick 的能力

00:05:26.985 --> 00:05:28.170
我们将

00:05:28.170 --> 00:05:30.945
数学公式也带到了WIKI。

00:05:30.945 --> 00:05:38.620
那么，我可以简单的键入
e=mc^2

00:05:39.260 --> 00:05:41.730
如您在右手预览窗所看到的


00:05:41.730 --> 00:05:43.970
它已成为公式

00:05:43.970 --> 00:05:45.780
在数学上正式的写法

00:05:45.780 --> 00:05:47.790
以便让数学家一眼看懂

00:05:47.790 --> 00:05:50.100
您可能会说这是一个简单的公式

00:05:50.100 --> 00:05:56.200
因此，让我粘贴更真实生活中的示例

00:05:57.770 --> 00:06:03.015
喏，我刚粘贴了一个更有意思的公式

00:06:03.015 --> 00:06:05.385
你能在右手边的预览窗 


00:06:05.385 --> 00:06:07.050
看到正确的数学符号标记


00:06:07.050 --> 00:06:09.220
让我切换到我之前

00:06:09.220 --> 00:06:11.815
创建的另一个WIKI


00:06:11.815 --> 00:06:13.330
我将为您展示我们支持的 在Markdown 

00:06:13.330 --> 00:06:17.735
里面嵌入 STML 有多强大


00:06:17.735 --> 00:06:19.965
您可以创建这样的页面

00:06:19.965 --> 00:06:22.710
或者像这样在 VSTS Wiki中使用

00:06:22.710 --> 00:06:27.105
STML 和 Markdown的强大能力


00:06:27.105 --> 00:06:31.220
好,在Wiki里面永恒的任务是


00:06:31.220 --> 00:06:32.940
处理页面的顺序和页面的层次结构。

00:06:32.940 --> 00:06:35.685
在 VSTS Wiki,这样的任务非常简单

00:06:35.685 --> 00:06:37.275
我可以在页上，单击

00:06:37.275 --> 00:06:40.510
并快速创建子页

00:06:41.840 --> 00:06:45.525
并保存它.  如你所见

00:06:45.525 --> 00:06:49.020
我再Access wth AAD下面有了一个子页面


00:06:49.020 --> 00:06:52.625
我可以拖动此页  把它变成


00:06:52.625 --> 00:06:55.810
另一个页面的子页面 


00:06:55.810 --> 00:06:59.120
如你所见,移动页面这种操作容易产生的另一个问题是


00:06:59.120 --> 00:07:01.445
页面间的链接非常容易损坏


00:07:01.445 --> 00:07:03.365
因此，我将关闭此对话框，

00:07:03.365 --> 00:07:05.930
但要在移动 Wiki 页面时

00:07:05.930 --> 00:07:08.540
这些网页相互关联

00:07:08.540 --> 00:07:11.120
以至于移动操作很容易将页面之间的引用破坏掉

00:07:11.120 --> 00:07:14.315
因为引用的页面已经被移动了


00:07:14.315 --> 00:07:17.210
好, VSTS WIKI能让大家做的是


00:07:17.210 --> 00:07:19.315
如果我将这个页面移动到

00:07:19.315 --> 00:07:22.080
比如说 VSTS主页下面


00:07:22.080 --> 00:07:23.180
它允许您检查

00:07:23.180 --> 00:07:26.320
其他页面上的链接是否有效


00:07:26.320 --> 00:07:29.500
并且最终列出的结果可能不止是你


00:07:29.500 --> 00:07:31.105
因为移动页面损坏的页面链接


00:07:31.105 --> 00:07:32.590
也包括因为你的移动操作

00:07:32.590 --> 00:07:34.360
损坏的对WorkItems 的链接.


00:07:34.360 --> 00:07:37.060
这里并不需要你来修复这些损伤


00:07:37.060 --> 00:07:39.675
检测功能实际上修复它了，

00:07:39.675 --> 00:07:40.845
然后系统才移动页面。

00:07:40.845 --> 00:07:43.585
所以我点击修复且移动


00:07:43.585 --> 00:07:46.885
VSTS Wiki 就跑去修复这些页面

00:07:46.885 --> 00:07:52.790
然后将我的页面作为Wiki homepage的一个子页面了。

00:07:53.600 --> 00:07:59.474
下面，在约翰正在处理 VSTS Wiki 用户界面同时，杰西卡，

00:07:59.474 --> 00:08:00.960
我们共同开发人员

00:08:00.960 --> 00:08:03.285
刚才提到过,她不想要在 UI 中写文档


00:08:03.285 --> 00:08:05.235
她想要在IDE上工作

00:08:05.235 --> 00:08:10.485
在这里，杰西卡能看到WIKI的URL


00:08:10.485 --> 00:08:14.480
而且实际上她能将WIKI克隆到桌面,离线化


00:08:14.480 --> 00:08:18.500
像处理任何其他代码文件一样来处理WIKI


00:08:18.500 --> 00:08:19.580
然后回过来创建

00:08:19.580 --> 00:08:22.015
一个对WIKI文档的pull request.


00:08:22.015 --> 00:08:23.790
用这样简单的机制,我们满足了


00:08:23.790 --> 00:08:27.240
约翰和杰西卡两个人的需求


00:08:27.240 --> 00:08:31.610
但是，当我们采访像杰西卡的角色

00:08:31.610 --> 00:08:33.380
我们意识到她的需求不仅仅是

00:08:33.380 --> 00:08:36.370
将Wiki文档离线


00:08:36.370 --> 00:08:40.040
杰西卡已有大量的文档

00:08:40.040 --> 00:08:44.045
同时她实际的代码对应存储在代码库中


00:08:44.045 --> 00:08:45.970
这是 API 级别文档

00:08:45.970 --> 00:08:47.495
是关键级别的文档，

00:08:47.495 --> 00:08:49.400
这些文档她已被写了很长时间。

00:08:49.400 --> 00:08:53.265
这些角色会遇到四个问题

00:08:53.265 --> 00:08:55.550
第一，任何人

00:08:55.550 --> 00:08:57.200
想要读取她们的文档

00:08:57.200 --> 00:08:59.855
实际上必须筛选所有的代码，

00:08:59.855 --> 00:09:01.820
并找到文档。

00:09:01.820 --> 00:09:05.380
第二，如果该产品有多个版本，

00:09:05.380 --> 00:09:08.875
该文档很难维护。

00:09:08.875 --> 00:09:10.880
第三，没有在 GIT 存储库

00:09:10.880 --> 00:09:13.625
文件没有排序


00:09:13.625 --> 00:09:16.990
Wiki 是本质上是基于排序。


00:09:16.990 --> 00:09:20.560
第四，没有简单的方法来发现

00:09:20.560 --> 00:09:23.920
已经写入在代码存储库中的文档和页面




00:09:23.920 --> 00:09:28.405
所以 让我们看看 VSTS Wiki如何解决了这四个问题。

00:09:28.405 --> 00:09:31.930
我将回到 我们正在处理中的原始项目


00:09:31.930 --> 00:09:36.390
我将转到"代码"

00:09:36.390 --> 00:09:37.500
正如您可以看到

00:09:37.500 --> 00:09:39.225
这里有人写了很多代码

00:09:39.225 --> 00:09:40.830
而且据我所知

00:09:40.830 --> 00:09:42.990
还有产品级别的文档

00:09:42.990 --> 00:09:44.955
和代码一起保存在这里


00:09:44.955 --> 00:09:48.255
因此，若要发布本文档到 Wiki，

00:09:48.255 --> 00:09:51.300
我将转到 Wiki，并在其上单击

00:09:51.300 --> 00:09:54.765
"作为 Wiki 发布代码。" 就行了。

00:09:54.765 --> 00:09:57.935
你选一个你要发文档所在的repo



00:09:57.935 --> 00:10:00.779
选好分支，和文件夹，

00:10:00.779 --> 00:10:03.315
"docs-ref-conceptual"

00:10:03.315 --> 00:10:10.110
然后我们输入我们的 Wiki 名称然后单击"发布"。

00:10:10.110 --> 00:10:12.640
就是这么简单。现在发生的行为是

00:10:12.640 --> 00:10:14.500
我们实际上访问

00:10:14.500 --> 00:10:16.975
您指定的文件夹和子文件夹


00:10:16.975 --> 00:10:18.760
查找所有Markdown文件

00:10:18.760 --> 00:10:24.320
从这些页面为你年创建Wiki


00:10:24.380 --> 00:10:26.930
这并不意味着我们将这些内容


00:10:26.930 --> 00:10:28.935
拷贝到Wiki

00:10:28.935 --> 00:10:30.590
这些页面仍然

00:10:30.590 --> 00:10:32.570
保存在原来代码所在的储存库

00:10:32.570 --> 00:10:35.690
但是这样一来


00:10:35.690 --> 00:10:37.575
对于试图阅读,查找代码和文件的人

00:10:37.575 --> 00:10:40.580
来说就方便太多了.


00:10:40.580 --> 00:10:43.155
现在，我们讨论版本。

00:10:43.155 --> 00:10:46.610
假定此产品还有一个版本 0.7

00:10:46.610 --> 00:10:48.390
已经发布一段时间了

00:10:48.390 --> 00:10:50.215
和我们现在文档的写法

00:10:50.215 --> 00:10:52.270
非常相似


00:10:52.270 --> 00:10:54.595
也有这个版本的文档


00:10:54.595 --> 00:10:58.225
VSTS Wiki 使发布多个的版本

00:10:58.225 --> 00:11:00.130
的同产品Wiki文档

00:11:00.130 --> 00:11:02.050
更加容易


00:11:02.050 --> 00:11:04.210
我所要做的就是单击"发布新版本"

00:11:04.210 --> 00:11:09.700
点选有正确版本文档的分支


00:11:09.700 --> 00:11:12.455
然后单击"更新"。

00:11:12.455 --> 00:11:15.660
完成。任何人谁现在打开这个页面

00:11:15.660 --> 00:11:18.665
都可以看到有本产品的两个版本

00:11:18.665 --> 00:11:20.460
或者，本文档中，

00:11:20.460 --> 00:11:24.740
可以看到Master和0.7两个版本


00:11:25.180 --> 00:11:28.205
第三个问题,是我们提到的

00:11:28.205 --> 00:11:30.050
排序文件问题。

00:11:30.050 --> 00:11:32.330
在 GIT 存储库中，

00:11:32.330 --> 00:11:34.550
文件没有持久的排序机制

00:11:34.550 --> 00:11:37.265
而同时，Wiki 是一种在Git代码库

00:11:37.265 --> 00:11:40.400
上的平面页面结构 

00:11:40.400 --> 00:11:43.945
但是，您可以用VSTS Wiki更改这一限制

00:11:43.945 --> 00:11:46.620
让我回到 刚才的例子文档路径，

00:11:46.620 --> 00:11:53.760
在这里添加一个叫  .order的文件

00:11:53.760 --> 00:11:57.010
这是该 VSTS  Wiki 用来维护

00:11:57.010 --> 00:12:00.595
Wiki 网站上的页面层次结构和顺序的文件


00:12:00.595 --> 00:12:02.905
因此，在这里，我们假设我们只是希望

00:12:02.905 --> 00:12:04.750
SDK Azure install 这个节点

00:12:04.750 --> 00:12:06.875
在第一项显示


00:12:06.875 --> 00:12:16.095
我这么处理,就完成了

00:12:16.095 --> 00:12:17.715
现在，当我回到 Wiki，

00:12:17.715 --> 00:12:22.080
到版本 7，

00:12:22.080 --> 00:12:24.520
您可以看到该节点"SDK Azure install"


00:12:24.520 --> 00:12:26.480
是显示的第一页。

00:12:26.480 --> 00:12:29.620
我想讲的最后一件事情是发现


00:12:29.620 --> 00:12:31.330
文档如果无法被人找到和阅读

00:12:31.330 --> 00:12:33.815
那和一条咸鱼有什么区别


00:12:33.815 --> 00:12:36.525
于是我们用这上面的搜索框

00:12:36.525 --> 00:12:44.290
您可以找你刚刚从代码发布到Wiki的文档


00:12:44.290 --> 00:12:46.600
如果搜索 Azure Node

00:12:46.600 --> 00:12:50.610
您将看到所有Azure Node的节点

00:12:50.610 --> 00:12:54.475
无论在标题或在该页面的实际正文都能找到




00:12:54.475 --> 00:12:58.030
这就让 Wiki 网页更易于被发现

00:12:58.030 --> 00:12:59.200
由此 可以帮助人们，

00:12:59.200 --> 00:13:00.940
找到他们正在寻找的内容。

00:13:00.940 --> 00:13:06.860
好，回到我们的 幻灯片，总而言之，

00:13:06.860 --> 00:13:10.155
VSTS Wiki 允许您用简单的方式

00:13:10.155 --> 00:13:14.600
创建项目文档 流程文档  和开发文档




00:13:14.600 --> 00:13:18.230
它支持markdown，利用 GIT，的强大功能

00:13:18.230 --> 00:13:20.120
使您能够

00:13:20.120 --> 00:13:23.495
随处发现所有 Wiki 页面。

00:13:23.495 --> 00:13:25.970
如果您想要知道更多有关VSTS 的 Wiki，的详细信息

00:13:25.970 --> 00:13:29.000
请访问 aka.ms/devopswiki，

00:13:29.000 --> 00:13:30.945
欢迎随时与我们联系，

00:13:30.945 --> 00:13:32.570
我或 Sandeep都会为

00:13:32.570 --> 00:13:34.355
您提出的VSTS Wiki的问题和反馈进行回复,

00:13:34.355 --> 00:13:37.170
非常感谢。

